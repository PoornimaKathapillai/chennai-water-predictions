# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load in 

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import matplotlib.pyplot as plt
import seaborn as seabornInstance 
import seaborn as sns
import datetime 
from sklearn.model_selection import train_test_split 
from sklearn.linear_model import LinearRegression
from sklearn import metrics
%matplotlib inline
# Input data files are available in the "../input/" directory.
# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory

import os
print(os.listdir("../input"))
# Any results you write to the current directory are saved as output.


df=pd.read_csv("../input/chennai_reservoir_rainfall.csv")
df1=pd.read_csv("../input/chennai_reservoir_levels.csv")
df.head(5)


df1.head(5)


df.shape


(5836, 5)



df.describe()


df1.describe()


df.plot(x='Date', y='CHOLAVARAM', style='o')  
plt.title('Date and Water level in Cholavaram')  
plt.xlabel('CHOLAVARAM')  
plt.ylabel('Date')  
plt.show()


import datetime 
df.plot(x='Date', y='POONDI', style='o')  
plt.title('Date and Water level in Poondi')  
plt.xlabel('POONDI')  
plt.ylabel('Date')  
plt.show()


df1.plot(x='POONDI',y='CHOLAVARAM',style='o')
plt.title('Poondi vs Cholavaram')
plt.xlabel('POONDI')
plt.ylabel('CHOLAVARAM')
plt.show()



plt.figure(figsize=(15,10))
plt.tight_layout()
seabornInstance.distplot(df['POONDI'])


plt.figure(figsize=(15,10))
plt.tight_layout()
seabornInstance.distplot(df['CHOLAVARAM'])


plt.figure(figsize=(15,10))
plt.tight_layout()
seabornInstance.distplot(df['CHEMBARAMBAKKAM'])



plt.figure(figsize=(15,10))
plt.tight_layout()
seabornInstance.distplot(df1['POONDI'])


plt.figure(figsize=(15,10))
plt.tight_layout()
seabornInstance.distplot(df1['CHOLAVARAM'])


plt.figure(figsize=(15,10))
plt.tight_layout()
seabornInstance.distplot(df1['REDHILLS'])


plt.figure(figsize=(15,10))
plt.tight_layout()
seabornInstance.distplot(df1['CHEMBARAMBAKKAM'])


X = df['POONDI'].values.reshape(-1,1)
y = df['POONDI'].values.reshape(-1,1)


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.5, random_state=0)


regressor = LinearRegression()  
regressor.fit(X_train, y_train) #training the algorithm



#To retrieve the intercept:
print(regressor.intercept_)
#For retrieving the slope:
print(regressor.coef_)



y_pred = regressor.predict(X_test)



df = pd.DataFrame({'Actual': y_test.flatten(), 'Predicted': y_pred.flatten()})
df


df1 = pd.DataFrame({'Actual': y_test.flatten(), 'Predicted': y_pred.flatten()})
df1



df2 = df.head(25)
df2.plot(kind='bar',figsize=(16,10))
plt.grid(which='major', linestyle='-', linewidth='0.5', color='green')
plt.grid(which='minor', linestyle=':', linewidth='0.5', color='black')
plt.show()



df3 = df1.head(25)
df3.plot(kind='bar',figsize=(16,10))
plt.grid(which='major', linestyle='-', linewidth='0.5', color='green')
plt.grid(which='minor', linestyle=':', linewidth='0.5', color='black')
plt.show()


plt.scatter(X_test, y_test,  color='gray')
plt.plot(X_test, y_pred, color='red', linewidth=2)
plt.show()


print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))  
print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))  
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))